<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>easy-mock本地部署过程</title>
      <link href="/2019/03/13/easy-mock%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E8%BF%87%E7%A8%8B/"/>
      <url>/2019/03/13/easy-mock%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h3><p> easy-mock 是常用的mock数据网站， 但是随着用户越来越多，easy-mock的接口响应速度有点时候会很慢(也跟本地网络环境有关)，而且接口也不稳定，时不时就挂了。。。</p><h3 id="需求："><a href="#需求：" class="headerlink" title="需求："></a>需求：</h3><p>  公司里有一台专门搭建内网服务器的机子，供开发者使用，所以想把easy-mock部署到本地，这样接口的稳定性和响应速度得到了保证，而且对团队开发也很有帮助。</p><h3 id="实施："><a href="#实施：" class="headerlink" title="实施："></a>实施：</h3><p>首先先看easy-mock本地部署的官方介绍，<a href="https://github.com/easy-mock/easy-mock/blob/dev/README.zh-CN.md" target="_blank" rel="noopener">https://github.com/easy-mock/easy-mock/blob/dev/README.zh-CN.md</a>.官网介绍的步骤，大致分为以下几步：</p><ol><li>安装 node（&gt;=v8.9） &amp; MongoDB（&gt;=v3.4） &amp; Redis（&gt;=v4.0）</li><li>安装 easy-mock，更改配置文件</li><li>启动 easy-mock，测试项目是否可以正常启动，能的话就可以先 Ctrl + C了</li><li>启动 MongoDB 和 Redis</li><li>npm run build，然后用 PM2 启动 app.js</li></ol><h4 id="1-先装node"><a href="#1-先装node" class="headerlink" title="1.先装node"></a>1.先装node</h4><p>这一步不多讲了，之前有一篇<a href="https://ynzy.github.io/2019/02/10/nvm%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%92%8Cnrm%E4%B8%8B%E8%BD%BD%E6%BA%90%E7%AE%A1%E7%90%86/">nvm版本管理和nrm下载源管理</a>讲到了如何安装管理node版本和npm下载源。我用的是8.15.0，已经放到公司服务器上，</p><h4 id="2-安装MongoDB"><a href="#2-安装MongoDB" class="headerlink" title="2.安装MongoDB"></a>2.安装MongoDB</h4><ul><li>安装包: 百度链接：<a href="https://pan.baidu.com/s/1M7HhtTRW8fE1Oknb0o4TgA" target="_blank" rel="noopener">https://pan.baidu.com/s/1M7HhtTRW8fE1Oknb0o4TgA</a>  提取码：kz8x </li><li><a href="http://baijiahao.baidu.com/s?id=1601512248926547477&amp;wfr=spider&amp;for=pc" target="_blank" rel="noopener">win版MongoDB安装教程</a></li><li>MongoDB配置环境变量里面写的不清楚，我在这里重写下，</li></ul><pre><code>MONGO_HOME = C:\Program Files\MongoDB\Server\3.4\binPath = %MONGO_HOME%</code></pre><ul><li>推荐使用可视化工具管理数据库，清晰明了，我现找了一个，全是英文看不懂，但也能凑活用了，如果有更好的希望推荐下。</li><li>教程网址<a href="https://www.jianshu.com/p/1194de9859d0" target="_blank" rel="noopener">Robo 3T,mongoDB可视化工具</a></li></ul><h4 id="3-安装redis"><a href="#3-安装redis" class="headerlink" title="3.安装redis"></a>3.安装redis</h4><ul><li>可以直接从<a href="https://redis.io/download" target="_blank" rel="noopener">https://redis.io/download</a>下载安装包,解压到根目录下面的 opt 文件夹下， 可以根据自己的需求改动 redis.conf 文件，然后输入命令 redis-server，就可以正常启动 redis 了。上面的百度链接里面也有压缩包。</li></ul><h4 id="4-安装easy-mock"><a href="#4-安装easy-mock" class="headerlink" title="4.安装easy-mock"></a>4.安装easy-mock</h4><ul><li>最后要安装的就是 easy-mock，git clone 下来，然后 npm install，安装依赖，npm run dev启动项目，config/default.json 可以自定义的配置，当然不配置倒也没关系，easy-mock会自动使用 MongoDB 和 redis，不需要其他操作。easy-mock 会默认启动在 7300 下面，打开服务器的ip+port，查看 easy-mock 是否正常启动，正常启动了说明安装阶段大功告成！</li><li>自定义配置:在–config下创建local.json文件,</li></ul><pre><code>{  &quot;port&quot;: 7300, //easymock项目启动的端口  &quot;host&quot;: &quot;0.0.0.0&quot;,  &quot;pageSize&quot;: 30,  &quot;proxy&quot;: false,  &quot;db&quot;: &quot;mongodb://localhost/easy-mock&quot;, // 不需要自己新建数据库，在启动的easymock新建接口即可  &quot;unsplashClientId&quot;: &quot;&quot;,  &quot;redis&quot;: {    &quot;port&quot;: 6379, //redis端口    &quot;host&quot;: &quot;localhost&quot;  },  &quot;blackList&quot;: {    &quot;projects&quot;: [], // projectId，例：&quot;5a4495e16ef711102113e500&quot;    &quot;ips&quot;: [] // ip，例：&quot;127.0.0.1&quot;  },  &quot;rateLimit&quot;: { // https://github.com/koajs/ratelimit    &quot;max&quot;: 1000,    &quot;duration&quot;: 1000  },  &quot;jwt&quot;: {    &quot;expire&quot;: &quot;14 days&quot;,    &quot;secret&quot;: &quot;shared-secret&quot;  },  &quot;upload&quot;: {    &quot;types&quot;: [&quot;.jpg&quot;, &quot;.jpeg&quot;, &quot;.png&quot;, &quot;.gif&quot;, &quot;.json&quot;, &quot;.yml&quot;, &quot;.yaml&quot;],    &quot;size&quot;: 5242880,    &quot;dir&quot;: &quot;../public/upload&quot;,    &quot;expire&quot;: {      &quot;types&quot;: [&quot;.json&quot;, &quot;.yml&quot;, &quot;.yaml&quot;],      &quot;day&quot;: -1    }  },  &quot;fe&quot;: {    &quot;copyright&quot;: &quot;&quot;,    &quot;storageNamespace&quot;: &quot;easy-mock_&quot;,    &quot;timeout&quot;: 25000,    &quot;publicPath&quot;: &quot;/dist/&quot;  }}</code></pre><h4 id="5-部署阶段："><a href="#5-部署阶段：" class="headerlink" title="5.部署阶段："></a>5.部署阶段：</h4><ol><li>全局安装pm2</li></ol><pre><code>npm install pm2 -g </code></pre><ol start="2"><li>编译easy-mock文件</li></ol><pre><code>npm run build</code></pre><ol start="3"><li>启动</li></ol><pre><code>pm2 start app.js -i 4</code></pre><ol start="4"><li>查看</li></ol><pre><code>pm2 list</code></pre><ol start="5"><li>访问ip+port</li></ol><pre><code>http://192.168.1.6:7300</code></pre><p>从此再也不用担心easy-mock官网不定时的崩掉了</p><h4 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址"></a>参考网址</h4><p><a href="https://www.jianshu.com/p/1650c2b9eec9" target="_blank" rel="noopener">easy-mock 本地部署过程</a><br><a href="https://my.oschina.net/guol/blog/1531704" target="_blank" rel="noopener">Easy Mock部署使用</a><br><a href="http://www.cnblogs.com/lentoo/p/9539137.html" target="_blank" rel="noopener">使用pm2自动化部署node项目</a></p>]]></content>
      
      
      <categories>
          
          <category> 模拟数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mock </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>仿美团项目笔记</title>
      <link href="/2019/03/11/%E4%BB%BF%E7%BE%8E%E5%9B%A2%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/03/11/%E4%BB%BF%E7%BE%8E%E5%9B%A2%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p> 在学习仿美团项目时，对于vue结构、组件拆分布局，路由结构划分、提取公共的url接口上又有了新的收获，进行一些总结</p><h2 id="一、技术选型"><a href="#一、技术选型" class="headerlink" title="一、技术选型"></a>一、技术选型</h2><pre><code>&quot;axios&quot;: &quot;^0.18.0&quot;,&quot;muse-ui&quot;: &quot;^3.0.2&quot;,   //按需引用&quot;node-sass&quot;: &quot;^4.11.0&quot;,&quot;vant&quot;: &quot;^1.6.7&quot;,    //全局使用&quot;vue&quot;: &quot;^2.5.2&quot;,&quot;vue-router&quot;: &quot;^3.0.1&quot;,&quot;vuex&quot;: &quot;^3.1.0&quot;,&quot;less&quot;: &quot;^3.9.0&quot;,&quot;less-loader&quot;: &quot;^4.1.0&quot;,</code></pre><p>  <a href="https://github.com/ynzy/vue-project/tree/master/imitate-meituan" target="_blank" rel="noopener">项目地址</a></p><h2 id="二、src的项目结构"><a href="#二、src的项目结构" class="headerlink" title="二、src的项目结构"></a>二、src的项目结构</h2><pre><code>|--src|  |-- api //存放公共的url和封装axios获取数据方法|  |-- components  //存放公共的组件|  |-- pages  //存放单个组件的页面|  |-- Museui.js  //按需引入museui的组件|  |-- store.js   //进行数据管理</code></pre><h2 id="三、vant和muse-ui的引入"><a href="#三、vant和muse-ui的引入" class="headerlink" title="三、vant和muse-ui的引入"></a>三、vant和muse-ui的引入</h2><h4 id="main-js"><a href="#main-js" class="headerlink" title="main.js"></a>main.js</h4><h5 id="1、全局引入vant"><a href="#1、全局引入vant" class="headerlink" title="1、全局引入vant"></a>1、全局引入vant</h5><pre><code>import Vant from &#39;vant&#39;;import &#39;vant/lib/index.css&#39;;Vue.use(Vant);</code></pre><h5 id="2、按需引入muse-ui"><a href="#2、按需引入muse-ui" class="headerlink" title="2、按需引入muse-ui"></a>2、按需引入muse-ui</h5><pre><code>import Vue from &#39;vue&#39;;import &#39;muse-ui/lib/styles/base.less&#39;;import {  AppBar,  Avatar,  Badge,  BottomNav,  Button,  TextField,  theme} from &#39;muse-ui&#39;;import &#39;muse-ui/lib/styles/theme.less&#39;;Vue.use(Icon);Vue.use(Button);Vue.use(AppBar);Vue.use(BottomNav);Vue.use(Paper);Vue.use(TextField);Vue.use(Badge);Vue.use(Avatar);Vue.use(theme);//自定义主题theme.add(&#39;teal&#39;, {  primary: &#39;#009688&#39;,  secondary: &#39;#ff4081&#39;,  success: &#39;#4caf50&#39;,  warning: &#39;#ffeb3b&#39;,}, &#39;light&#39;);theme.use(&#39;teal&#39;);</code></pre><h2 id="四、tabbar组件实现及路由跳转实现"><a href="#四、tabbar组件实现及路由跳转实现" class="headerlink" title="四、tabbar组件实现及路由跳转实现"></a>四、tabbar组件实现及路由跳转实现</h2><ol><li>底部导航菜单栏使用muse-ui的tabbar组件，菜单页面路由通过Main.vue在底部菜单之上实现。</li></ol><pre><code>&lt;template&gt;  &lt;div&gt;    &lt;router-view/&gt;    &lt;mu-paper class=&quot;g-footer&quot;&gt;      &lt;mu-bottom-nav :value=&quot;bottomNav&quot;&gt;        &lt;mu-bottom-nav-item to=&quot;/home&quot; value=&quot;/home&quot; title=&quot;首页&quot; icon=&quot;home&quot;&gt;&lt;/mu-bottom-nav-item&gt;        &lt;mu-bottom-nav-item to=&quot;/recent&quot; value=&quot;/recent&quot; title=&quot;附近&quot; icon=&quot;pin_drop&quot;&gt;&lt;/mu-bottom-nav-item&gt;        &lt;mu-bottom-nav-item to=&quot;/guang&quot; value=&quot;/guang&quot; title=&quot;逛一逛&quot; icon=&quot;language&quot;&gt;&lt;/mu-bottom-nav-item&gt;        &lt;mu-bottom-nav-item to=&quot;/order&quot; value=&quot;/order&quot; title=&quot;订单&quot; icon=&quot;assignment&quot;&gt;&lt;/mu-bottom-nav-item&gt;        &lt;mu-bottom-nav-item to=&quot;/me&quot; value=&quot;/me&quot; title=&quot;我的&quot; icon=&quot;account_circle&quot;&gt;&lt;/mu-bottom-nav-item&gt;      &lt;/mu-bottom-nav&gt;    &lt;/mu-paper&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {  data() {    return {      bottomNav: &quot;/home&quot;    };  },  methods: {},  mounted() {    //当每次重新挂载(重新刷新)时，重新匹配路由，使导航和路由路径相匹配    // console.log(this.$route.path);    let path = this.$route.path;    if(path==&quot;/&quot;)path=&quot;/home&quot;;    this.bottomNav = path;  }};&lt;/script&gt;&lt;style lang=&quot;less&quot; &gt;//TODO:由于museui字体图标无法显示，直接引入cdn库@import &quot;http://cdn.bootcss.com/material-design-icons/3.0.1/iconfont/material-icons.css&quot;;.g-footer {  position: fixed;  left: 0;  right: 0;  bottom: 0;}.mu-bottom-item {  min-width: 0.62rem;}&lt;/style&gt;</code></pre><ol start="2"><li>页面路由结构</li></ol><pre><code>routes: [    {      path: &#39;/&#39;,      component: Main,      children: [  //TODO: 设置子路由        {          path: &#39;&#39;,  //设置空路由，父级匹配一个子路由          name: &#39;main&#39;,          component: Home        },        {          path: &#39;/home&#39;,          name: &#39;home&#39;,          component: Home        },        {          path: &#39;/recent&#39;,          name: &#39;recent&#39;,          component: Recent        },        {          path: &#39;/guang&#39;,          name: &#39;guang&#39;,          component: Guang        },        {          path: &#39;/order&#39;,          name: &#39;order&#39;,          component: Order        },        {          path: &#39;/me&#39;,          name: &#39;me&#39;,          component: Me        }      ]    },    {      path: &#39;/meishi&#39;,  //单页面路由，不匹配在tabbar上      name: &#39;meishi&#39;,      component: MeShi    }  ]</code></pre><ul><li>由于页面刷新时，底部菜单索引自动匹配第一个路由页面，导致页面与底部菜单活跃状态不符，所以页面重新挂载时，获取此时路由的值，重新给底部菜单活跃项赋值。</li></ul><h2 id="五、页面拆分成组件"><a href="#五、页面拆分成组件" class="headerlink" title="五、页面拆分成组件"></a>五、页面拆分成组件</h2><ul><li>所有的页面中一部分都拆分成单个组件去进行渲染</li><li>示例：</li></ul><h2 id="六、api接口的封装"><a href="#六、api接口的封装" class="headerlink" title="六、api接口的封装"></a>六、api接口的封装</h2><ol><li>–api–config.js,存放公共的url地址</li></ol><pre><code>var url = &quot; https://www.easy-mock.com/mock/5c7d08e7b7a08d1246bef9ff/api/&quot;export {url};</code></pre><ol start="2"><li>—api–shop.js,存放获取商品列表的axios方法</li></ol><pre><code>import axios from &#39;axios&#39;import { url } from &#39;./config&#39;let getShopList = (page) =&gt; {  return axios({    method: &quot;post&quot;,    url: url + &quot;shopList&quot;,    data: {      page: page,      pageSize: 10    }  })}export {  getShopList}</code></pre><ol start="3"><li>api接口的使用–pages–home-HomeShop.vue</li></ol><pre><code>&lt;template&gt;  &lt;div&gt;    &lt;van-list v-model=&quot;loading&quot; :finished=&quot;finished&quot; finished-text=&quot;没有更多了&quot; @load=&quot;onLoad&quot;&gt;      &lt;van-card v-for=&quot;(item,index) in list&quot; :key=&quot;index&quot;&gt;        &lt;div slot=&quot;title&quot;&gt;          &lt;strong&gt;{{item.desc}}&lt;/strong&gt;          &lt;div class=&quot;distance&quot;&gt;&lt; 500m&lt;/div&gt;        &lt;/div&gt;        &lt;div slot=&quot;desc&quot;&gt;{{item.pos}}{{item.id}}&lt;/div&gt;        &lt;div slot=&quot;price&quot;&gt;          &lt;span&gt;￥{{item.price}}&lt;/span&gt;          &lt;van-tag size=&quot;medium&quot; type=&quot;danger&quot;&gt;劲爆&lt;/van-tag&gt;          &lt;div class=&quot;workoff&quot;&gt;已售{{item.sales}}&lt;/div&gt;        &lt;/div&gt;        &lt;div slot=&quot;thumb&quot;&gt;          &lt;img :src=&quot;&#39;/static/shoplog/&#39;+ item.imgurl&quot; alt&gt;        &lt;/div&gt;      &lt;/van-card&gt;    &lt;/van-list&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import { getShopList } from &quot;@/api/shop&quot;;  //引入获取商品列表分页数据的方法export default {  data() {    return {       list: [],      loading: false,      finished: false       page: 0    };  },  mounted() {},  methods: {    onLoad() {      this.page++      // 数据全部加载完成      setTimeout(() =&gt; {        getShopList(this.page)          .then(res =&gt; {            if (res.data.success) {              //遍历获取的数据添加到商品列表数组中进行渲染               res.data.shop.forEach(item =&gt; {                 this.list.push(item);               });              // 加载状态结束              this.loading = false;            }          })          .catch(function(err) {            alert(&quot;接口错误：&quot; + err);          });      }, 2000);      //如果获取数据长度超过了70,则不再获取数据      if (this.list.length &gt;= 70) {        this.finished = true;      }    }  }};&lt;/script&gt;&lt;style lang=&quot;less&quot; scoped&gt;.van-list {  //深度作用选择器: 如果你希望 scoped 样式中的一个选择器能够作用得“更深”，例如影响子组件，你可以使用 &gt;&gt;&gt; 操作符,使用预编译器则使用 &quot;/deep/ &quot;  /deep/ .van-card {       background: #fff;  }}.van-card__price {  margin-top: 5px;  width: 100%;}.van-card__content {  strong {    font-size: 14px;  }}.distance {  float: right;  width: 0.6rem;  text-align: right;  font-weight: 500;  color: #000;}.workoff {  float: right;  width: 0.6rem;  text-align: right;  font-weight: 500;  color: #000;}&lt;/style&gt;</code></pre><h2 id="七、使用vuex管理数据"><a href="#七、使用vuex管理数据" class="headerlink" title="七、使用vuex管理数据"></a>七、使用vuex管理数据</h2><ul><li>创建store.js对商品列表的分页数据进行管理</li></ul><pre><code>import Vue from &#39;vue&#39;import Vuex from &#39;vuex&#39;Vue.use(Vuex);var state = {  shop: {    num: 1,    list: [],    page: 0  }}const mutations = {  setshoplist(state, data) {  //设置商品列表数据    state.shop.list = state.shop.list.concat(data)  //拼接数组  },  nextpage(state){  //下一页    state.shop.page++;  }}export default new Vuex.Store({  state,  mutations})</code></pre><ul><li>在HomeShop.vue页面使用vuex接收数据</li></ul><pre><code>&lt;script&gt; import { mapState } from &quot;vuex&quot;;  //引入vuex数据mapState辅助函数import { getShopList } from &quot;@/api/shop&quot;;  //引入获取商品列表分页数据的方法export default {  data() {    return {      // list: [],      loading: false,      finished: false      // page: 0    };  },  computed: {    ...mapState({      list: state =&gt; state.shop.list,  //获取vuex中的list数据      page: state =&gt; state.shop.page   //获取vuex中的分页数据    })  },  mounted() {},  methods: {    onLoad() {      //每次加载刷新，页数加1      this.$store.commit(&quot;nextpage&quot;);  //提交页数突变的方法      // 数据全部加载完成      setTimeout(() =&gt; {        getShopList(this.page)          .then(res =&gt; {            if (res.data.success) {              this.$store.commit(&quot;setshoplist&quot;, res.data.shop);  //提交商品数据突变方法              // 加载状态结束              this.loading = false;            }          })          .catch(function(err) {            alert(&quot;接口错误：&quot; + err);          });      }, 2000);      //如果获取数据长度超过了70,则不再获取数据      if (this.list.length &gt;= 70) {        this.finished = true;      }    }  }};&lt;/script&gt;</code></pre><h2 id="八、制作svg图标，引入自定义图标"><a href="#八、制作svg图标，引入自定义图标" class="headerlink" title="八、制作svg图标，引入自定义图标"></a>八、制作svg图标，引入自定义图标</h2><ol><li>使用Ai制作svg图标，保存为svg格式</li><li>进入<a href="https://icomoon.io/" target="_blank" rel="noopener">制作字体图标官网</a></li><li><img src="https://upload-images.jianshu.io/upload_images/13505073-9ef52fe4d4c425fb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="导入svg图标"><br><img src="https://upload-images.jianshu.io/upload_images/13505073-3fad0e483ac4358d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="导入svg图标"></li><li>也可以选择观望已有的图标，选择之后下方有显示，<br><img src="https://upload-images.jianshu.io/upload_images/13505073-dd2da770c8da4987.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></li><li>点击下方<em>Generate Font F</em>按钮对选择的图标进行设置，然后下载<br><img src="https://upload-images.jianshu.io/upload_images/13505073-74c8a897cca4700d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="点击preferences进行个性化设置"></li><li>得到解压包以后，把解压的文件放在<code>assets</code>文件夹中，此文件夹会被打包编译，</li><li>解决样式冲突问题：<ul><li>由于项目引入了其他ui框架，本身有字体图标，会与自定义图标冲突，需要解决</li><li>编写–style.scss文件</li></ul></li></ol><pre><code>//TODO: 解决字体图标库与框架的字体图标库的冲突问题//以&quot;icon-mt-&quot;打头，包含&quot; icon-mt-&quot;的，css3选择器i[class^=&quot;icon-mt-&quot;],i[class*=&quot; icon-mt-&quot;] {  font-family: &#39;#{$icomoon-font-family}&#39; !important;  speak: none;  font-style: normal;  font-weight: normal;  font-variant: normal;  text-transform: none;  line-height: 1;  /* Better Font Rendering =========== */  -webkit-font-smoothing: antialiased;  -moz-osx-font-smoothing: grayscale;}</code></pre><ol start="8"><li>如果想添加样式直接在–style.scss文件添加</li></ol><pre><code>.icon-mt-hezuo {  &amp;:before {    content: $icon-mt-hezuo;         color: $icon-mt-color;  }}//默认没有状态样式，自定义添加.icon-mt-hezuo:active {  &amp;:before {    content: $icon-mt-hezuo;         color: red;  }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> vue项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue中数据交互和传参方式</title>
      <link href="/2019/03/03/vue%E4%B8%AD%E6%95%B0%E6%8D%AE%E4%BA%A4%E4%BA%92%E5%92%8C%E4%BC%A0%E5%8F%82%E6%96%B9%E5%BC%8F/"/>
      <url>/2019/03/03/vue%E4%B8%AD%E6%95%B0%E6%8D%AE%E4%BA%A4%E4%BA%92%E5%92%8C%E4%BC%A0%E5%8F%82%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<!-- # vue中数据交互和传参方式 --><h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><p>通过vue-music-app项目，初步熟悉vue中的数据交互和传参方式，此项目中使用到了<br>vuex，vue-router，props，solt传参方式进行页面传参，以及如何设置代理服务器对访问的ip地址进行管理<br>，并且使用到了vant按需引入轮播图组件。</p><p><a href="https://github.com/ynzy/vue-project/tree/master/vue-music-app" target="_blank" rel="noopener">源码地址</a></p><h2 id="二、传参方式"><a href="#二、传参方式" class="headerlink" title="二、传参方式"></a>二、传参方式</h2><h3 id="1、插槽分发内容"><a href="#1、插槽分发内容" class="headerlink" title="1、插槽分发内容"></a>1、插槽分发内容</h3><ul><li>定义一个组件，在组件内写入<code>&lt;slot&gt;&lt;/slot&gt;</code>标签，当调用组件时，组件中如果有内容，则会替换slot标签渲染数据。</li><li><p>新建一个slider组件：</p><pre><code>&lt;template&gt;&lt;!-- TODO:vue通过ref设置dom元素，通过$refs方法获取此dom节点 --&gt;&lt;div class=&quot;slider&quot; ref=&quot;slider&quot;&gt;  &lt;div class=&quot;sliderGroup&quot; ref=&quot;sliderGroup&quot;&gt;    &lt;slot&gt;&lt;/slot&gt;  &lt;/div&gt;&lt;/div&gt;&lt;/template&gt;</code></pre></li><li><p>新建一个recommend.vue组件，调用slider组件</p><pre><code>&lt;template&gt;  &lt;div class=&quot;recommend&quot;&gt;    &lt;h2 class=&quot;recommendlist&quot;&gt;推荐歌单&lt;/h2&gt;    &lt;slider&gt;      &lt;!-- TODO:使用插槽,通过组件的slot标签，替换数据 --&gt;      &lt;div v-for=&quot;item in slider&quot; :key=&quot;item.id&quot;&gt;        {{ item.songName }}      &lt;/div&gt;    &lt;/slider&gt;&lt;/div&gt;&lt;/template&gt;&lt;script&gt;import slider from &quot;./slider.vue&quot;;export default {  data() {    return {       slider: []    };  },  components: {  //调用slider组件    slider  },  methods: {      getSlider() {  //获取数据存储在slider数组中        this.$axios.get(&quot;http://www.wanandroid.com/tools/mockapi/9664/songlist&quot;).then(resp =&gt; {          if (resp.status == 200) {            this.slider = resp.data;          }        });      },  }&lt;/script&gt;</code></pre><p><img src="https://upload-images.jianshu.io/upload_images/13505073-e3539c75d7ee9299.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="页面效果.png"></p></li></ul><h3 id="2、通过props进行父子组件传参"><a href="#2、通过props进行父子组件传参" class="headerlink" title="2、通过props进行父子组件传参"></a>2、通过props进行父子组件传参</h3><ul><li><p>有些时候，我们定义一个组件，在多个地方调用，而所需展示的数据不同，可以通过props传参方式对组件进行页面渲染</p></li><li><p>新建一个Songlist.vue组件</p></li></ul><pre><code>&lt;!-- 不同数据调用此模板 --&gt;&lt;template&gt;  &lt;div&gt;    &lt;ul&gt;      &lt;li class=&quot;songli&quot; v-for=&quot;item in songList&quot; @click=&quot;selectSong(item)&quot;&gt;        &lt;div class=&quot;songinfor&quot;&gt;          &lt;p class=&quot;title&quot;&gt;{{item.songName}}&lt;/p&gt;          &lt;p class=&quot;singer&quot; style=&quot;font-size:12px;color:#888&quot;&gt;{{item.singer}}&lt;/p&gt;        &lt;/div&gt;        &lt;p class=&quot;start&quot;&gt;          &lt;img src=&quot;../../static/img/start.png&quot;&gt;        &lt;/p&gt;      &lt;/li&gt;    &lt;/ul&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {    props: [&quot;songList&quot;],  //通过props接收父组件传送的数据};&lt;/script&gt;</code></pre><ul><li>新建一个recommend.vue,调用子组件SongList</li></ul><pre><code>&lt;template&gt;  &lt;div class=&quot;recommend&quot;&gt;      &lt;!-- TODO:动态绑定数据songList数据，子组件通过props接收数据 --&gt;    &lt;songList :song-list=&quot;songList&quot;&gt;&lt;/songList&gt;    &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import songList from &quot;./Songlist.vue&quot;export default {  data() {    return {       songList: []    };  },  components: {    songList,  },  methods: {    getSongList() {      this.$axios.get(&quot;http://www.wanandroid.com/tools/mockapi/9664/recommend&quot;).then(resp =&gt; {        if (resp.status == 200) {          this.songList = resp.data;        }      });    }  }};&lt;/script&gt;</code></pre><p><img src="https://upload-images.jianshu.io/upload_images/13505073-a447d0175d80d847.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="页面效果.png"></p><ul><li>新建一个Hot.vue组件，也调用子组件Songlist</li></ul><pre><code>&lt;template&gt;  &lt;div id=&quot;hot&quot;&gt;            &lt;div class=&quot;banner&quot;&gt;            热门歌曲        &lt;/div&gt;        &lt;!-- 动态绑定数据hotList数据 --&gt;        &lt;songList :song-list=&quot;hotList&quot;&gt;&lt;/songList&gt;    &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import songList from &quot;./Songlist.vue&quot;    export default {                data() {            return {hotList: []}        },        methods: {            getHotList() {                 this.$axios.get(&quot;http://www.wanandroid.com/tools/mockapi/9664/recommend&quot;).then(resp =&gt; {                    if (resp.status == 200) {                        this.hotList = resp.data;                    }                });            }        },        mounted() {            this.getHotList()        },        components: {            songList        }    }&lt;/script&gt;</code></pre><p><img src="https://upload-images.jianshu.io/upload_images/13505073-b754df0159ac607c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="页面效果.png"></p><h3 id="3、使用vue-router进行页面传参"><a href="#3、使用vue-router进行页面传参" class="headerlink" title="3、使用vue-router进行页面传参"></a>3、使用vue-router进行页面传参</h3><ul><li>点击某个菜单项，跳转到另一个组件页面时可以使用vue-router进行传参</li><li>对路由进行配置<br><img src="https://upload-images.jianshu.io/upload_images/13505073-63cd4d2cd00d4d86.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="路由配置.png"></li><li>在songList组件添加点击事件跳转查看详情页</li></ul><pre><code>&lt;!-- 不同数据调用此模板 --&gt;&lt;template&gt;  &lt;div&gt;    &lt;ul&gt;      &lt;li class=&quot;songli&quot; v-for=&quot;item in songList&quot; @click=&quot;selectSong(item)&quot;&gt;        &lt;div class=&quot;songinfor&quot;&gt;          &lt;p class=&quot;title&quot;&gt;{{item.songName}}&lt;/p&gt;          &lt;p class=&quot;singer&quot; style=&quot;font-size:12px;color:#888&quot;&gt;{{item.singer}}&lt;/p&gt;        &lt;/div&gt;        &lt;p class=&quot;start&quot;&gt;          &lt;img src=&quot;../../static/img/start.png&quot;&gt;        &lt;/p&gt;      &lt;/li&gt;    &lt;/ul&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {    props: [&quot;songList&quot;],    methods: {        selectSong(item) {            // 直接调用$router.push,实现携带参数的跳转            // this.$router.push({            //     &quot;name&quot; : &quot;Detail&quot;,  //发送跳转页面名字            //     &quot;params&quot; : {item,item} //TODO: 通过路由的params进行传参            // })            this.$router.push({                &quot;path&quot;: &quot;/detail/:item&quot;,                &quot;query&quot;: {item: JSON.stringify(item)}  //TODO: 通过路由的query进行传参            })        },    }};&lt;/script&gt;</code></pre><ul><li>新建detail.vue组件，接收页面传参</li></ul><pre><code>&lt;template&gt;    &lt;transition name=&quot;slider&quot;&gt;        &lt;div class=&quot;detail&quot;&gt;                &lt;div class=&quot;songimg&quot;&gt;                    &lt;img :src=&quot;songDetail.songImgSrc&quot;&gt;                &lt;/div&gt;                &lt;div class=&quot;songtitle&quot;&gt;                    {{songDetail.songName}}                &lt;/div&gt;                &lt;div class=&quot;songaudio&quot;&gt;                    &lt;audio autoplay=&quot;autoplay&quot;&gt;                        &lt;source src=&quot;static/song/song.ogg&quot; type=&quot;audio/ogg&quot; /&gt;                        &lt;source src=&quot;static/song/song.mp3&quot; type=&quot;audio/mpeg&quot; /&gt;                    &lt;/audio&gt;                &lt;/div&gt;            &lt;/div&gt;    &lt;/transition&gt;&lt;/template&gt;&lt;script&gt;    export default {        data() {            return {                songDetail: {}            }        },        mounted () {            //TODO:parmas传参不可以刷新，会丢失数据，query可以刷新页面            // console.log(this.$route.params) //$route接收传递的参数            // this.songDetail = this.$route.params.item  //TODO: params接收路由传递的参数            this.songDetail = JSON.parse(this.$route.query.item); //TODO: query接收路由传递的参数        },    }&lt;/script&gt;</code></pre><h3 id="4、使用vuex进行数据管理"><a href="#4、使用vuex进行数据管理" class="headerlink" title="4、使用vuex进行数据管理"></a>4、使用vuex进行数据管理</h3><ul><li>使用vuex可以更好的管理数据状态，使数据得到共享</li><li>安装vuex <code>npm install vuex --save</code></li><li>新建store文件夹，同一组织store文件<br><img src="https://upload-images.jianshu.io/upload_images/13505073-b8ff747ee5b2c8b6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="store文件结构.png"><h5 id="1-在main-js引入store"><a href="#1-在main-js引入store" class="headerlink" title="(1) 在main.js引入store"></a>(1) 在main.js引入store</h5></li></ul><pre><code>import Vue from &#39;vue&#39;import App from &#39;./App&#39;import router from &#39;./router&#39;import axios from &#39;axios&#39;import store from &#39;./store/index&#39;  //导入store主文件indexVue.prototype.$axios = axios  //将axios添加到vue的原型上，所有vue实例上都可以使用axiosVue.config.productionTip = falsenew Vue({  el: &#39;#app&#39;,  store,  //添加在vue实例上  router,  components: { App },  template: &#39;&lt;App/&gt;&#39;})</code></pre><h5 id="2-编写store文件夹"><a href="#2-编写store文件夹" class="headerlink" title="(2) 编写store文件夹"></a>(2) 编写store文件夹</h5><ul><li><p>index.js</p><pre><code>import Vue from &#39;vue&#39;import Vuex from &#39;vuex&#39;import getters from &#39;./getters&#39;import state from &#39;./state&#39;import mutations from &#39;./mutations&#39;import actions from &#39;./action&#39;Vue.use(Vuex)export default new Vuex.Store({  getters,  state,  mutations,  actions})</code></pre></li><li>state.js  //数据管理<pre><code>const state = {  song: {}}export default {  state}</code></pre></li><li>getters.js  //管理数据状态，相当于computed(计算)属性<pre><code>const getters={getSong(state){  return state.song;}}export default getters;</code></pre></li><li><p>actions.js  //提交数据变化，一把用于异步获取数据，相当于methods(方法)属性</p><pre><code>import types from &#39;./types.js&#39;import axios from &#39;axios&#39;const actions = {getSongAsync({commit,state}) {  axios.get(&quot;/recommend/&quot;).then(resp =&gt; {    if (resp.status == 200) {      commit(types.GET_SONG, resp.data);  //提交突变    }  });}}export default actions;</code></pre></li><li><p>mutations.js //改变数据状态，也就相当于对state数据进行更新</p><pre><code>import types from &#39;./types&#39;const mutations = {  [types.GET_SONG](state,data) {      state.song = data      console.log(data)  }}export default mutations</code></pre></li><li><p>types.js  //定义方法名常量，管理方法名</p><pre><code>const GET_SONG = &quot;GET_SONG&quot;  export default {  GET_SONG}</code></pre></li></ul><h5 id="3-在detail-vue组件调用state中的数据"><a href="#3-在detail-vue组件调用state中的数据" class="headerlink" title="(3) 在detail.vue组件调用state中的数据"></a>(3) 在detail.vue组件调用state中的数据</h5><pre><code>&lt;script&gt;import { mapGetters, mapActions } from &quot;vuex&quot;;export default {  computed: {    ...mapGetters([&quot;getSong&quot;])  //此数据可以直接在页面模板调用  },  created() {    this.$store.dispatch(&quot;getSongAsync&quot;);  //页面初始化时发送事件  }};&lt;/script&gt;</code></pre><h2 id="三、引入Vant"><a href="#三、引入Vant" class="headerlink" title="三、引入Vant"></a>三、引入Vant</h2><h3 id="Vant按需引入组件"><a href="#Vant按需引入组件" class="headerlink" title="Vant按需引入组件"></a>Vant按需引入组件</h3><p><a href="https://youzan.github.io/vant/#/zh-CN/intro" target="_blank" rel="noopener">官方网址</a></p><h5 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h5><p><code>npm i vant -S</code></p><ul><li>babel-plugin-import 是一款 babel 插件，它会在编译过程中将 import 的写法自动转换为按需引入的方式</li></ul><pre><code># 安装 babel-plugin-import 插件npm i babel-plugin-import -D</code></pre><pre><code>// .babelrc 中配置// 注意：webpack 1 无需设置 libraryDirectory{  &quot;plugins&quot;: [    [&quot;import&quot;, {      &quot;libraryName&quot;: &quot;vant&quot;,      &quot;libraryDirectory&quot;: &quot;es&quot;,      &quot;style&quot;: true    }]  ]}</code></pre><blockquote><p>!注意：配置 babel-plugin-import 插件后将不允许导入所有组件</p></blockquote><h5 id="2、新建–src-vant-components-js按需使用swiper组件"><a href="#2、新建–src-vant-components-js按需使用swiper组件" class="headerlink" title="2、新建–src/vant-components.js按需使用swiper组件"></a>2、新建–src/vant-components.js按需使用swiper组件</h5><pre><code>import Vue from &#39;vue&#39;import { Swipe, SwipeItem } from &#39;vant&#39;;Vue.use(Swipe).use(SwipeItem);</code></pre><h5 id="3、在main引入vant-components-js即可在所有页面使用引入的组件"><a href="#3、在main引入vant-components-js即可在所有页面使用引入的组件" class="headerlink" title="3、在main引入vant-components.js即可在所有页面使用引入的组件"></a>3、在main引入vant-components.js即可在所有页面使用引入的组件</h5><p><img src="https://upload-images.jianshu.io/upload_images/13505073-6696122287b34157.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="引入组件.png"></p><h5 id="4、此时就可以在vue组件中使用vant的swipe组件了"><a href="#4、此时就可以在vue组件中使用vant的swipe组件了" class="headerlink" title="4、此时就可以在vue组件中使用vant的swipe组件了"></a>4、此时就可以在vue组件中使用vant的swipe组件了</h5><p><img src="https://upload-images.jianshu.io/upload_images/13505073-132545809587e068.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="使用组件.png"></p><h2 id="四、配置代理服务器"><a href="#四、配置代理服务器" class="headerlink" title="四、配置代理服务器"></a>四、配置代理服务器</h2><h3 id="编译打包前要做的事"><a href="#编译打包前要做的事" class="headerlink" title="编译打包前要做的事"></a>编译打包前要做的事</h3><h5 id="1、修改文件–config-index-js"><a href="#1、修改文件–config-index-js" class="headerlink" title="1、修改文件–config/index.js"></a>1、修改文件–config/index.js</h5><ul><li>找到build中<code>assetsPublicPath</code>选项进行修改<br><img src="https://upload-images.jianshu.io/upload_images/13505073-c6c836fa4a06e0e4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="修改assetsPublicPath选项.png"><h5 id="2、修改文件–config-index-js，进行代理服务器配置"><a href="#2、修改文件–config-index-js，进行代理服务器配置" class="headerlink" title="2、修改文件–config/index.js，进行代理服务器配置"></a>2、修改文件–config/index.js，进行代理服务器配置</h5></li><li>找到dev中的<code>proxyTable</code>进行代理服务器配置，统一管理接口</li></ul><pre><code>proxyTable: {  &#39;/song&#39;: {  //匹配项,放在项目调用中    target: &#39;http://www.wanandroid.com/tools/mockapi/9664/songlist&#39;, // 接口域名    // secure: false,  // 如果是https接口，需要配置这个参数    changeOrigin: true, //是否跨域    pathRewrite: { //重写地址      &#39;^/song&#39;: &#39;&#39; //因为接口中没有这个匹配项，所以要重写地址，才能正常访问    }  },}</code></pre><h5 id="3、修改文件–build-utils-js"><a href="#3、修改文件–build-utils-js" class="headerlink" title="3、修改文件–build/utils.js"></a>3、修改文件–build/utils.js</h5><ul><li>找到<code>ExtractTextPlugin.extract</code>，添加<code>publicPath</code>选项</li></ul><pre><code>if (options.extract) {    return ExtractTextPlugin.extract({      publicPath: &#39;../../&#39;,  //TODO:css中用到资源时需要加的属性      use: loaders,      fallback: &#39;vue-style-loader&#39;    })  } else {    return [&#39;vue-style-loader&#39;].concat(loaders)  }</code></pre>]]></content>
      
      
      <categories>
          
          <category> 脚手架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue-cli </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-cli3 项目创建-配置-发布</title>
      <link href="/2019/02/28/vue-cli3%E9%A1%B9%E7%9B%AE%E5%88%9B%E5%BB%BA-%E9%85%8D%E7%BD%AE-%E5%8F%91%E5%B8%83/"/>
      <url>/2019/02/28/vue-cli3%E9%A1%B9%E7%9B%AE%E5%88%9B%E5%BB%BA-%E9%85%8D%E7%BD%AE-%E5%8F%91%E5%B8%83/</url>
      
        <content type="html"><![CDATA[<h2 id="一、使用的技术"><a href="#一、使用的技术" class="headerlink" title="一、使用的技术"></a>一、使用的技术</h2><blockquote><p>vue-cli3<br>vuex<br>axios<br>采用的数据接口，easy-mock</p></blockquote><h2 id="二、初始化项目"><a href="#二、初始化项目" class="headerlink" title="二、初始化项目"></a>二、初始化项目</h2><ul><li>首先需要安装vue-cli3,<a href="https://cli.vuejs.org/zh/guide/installation.html" target="_blank" rel="noopener">官方教程</a></li><li>初始化安装，并成功启动,</li><li>初始化项目默认安装router<br><img src="https://upload-images.jianshu.io/upload_images/13505073-f363a00b6f8a8341.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/576/format/webp" alt="创建vue"><br><img src="https://upload-images.jianshu.io/upload_images/13505073-a3f0202c13195228.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/570/format/webp" alt="创建vue"><pre><code>vue init webpack itanycd itanynpm installnpm install less less-loader -D  //生产依赖npm install vuex axios -S       //开发依赖npm run dev</code></pre><img src="https://upload-images.jianshu.io/upload_images/7704547-e0d94506f32722cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/530/format/webp" alt="vue"></li></ul><h2 id="三、项目结构"><a href="#三、项目结构" class="headerlink" title="三、项目结构"></a>三、项目结构</h2><ul><li>项目文件介绍<pre><code>|-- build                            // 项目构建(webpack)相关代码|   |-- build.js                     // 生产环境构建代码|   |-- check-version.js             // 检查node、npm等版本|   |-- utils.js                     // 构建工具相关|   |-- vue-loader.conf.js           // webpack loader配置|   |-- webpack.base.conf.js         // webpack基础配置|   |-- webpack.dev.conf.js          // webpack开发环境配置,构建开发本地服务器|   |-- webpack.prod.conf.js         // webpack生产环境配置|-- config                           // 项目开发环境配置|   |-- dev.env.js                   // 开发环境变量|   |-- index.js                     // 项目一些配置变量|   |-- prod.env.js                  // 生产环境变量|-- src                              // 源码目录|   |-- assets                       // 静态资源|   |-- components                   // vue公共组件|   |-- router                       // vue的路由管理|   |-- App.vue                      // 页面入口文件|   |-- main.js                      // 程序入口文件，加载各种公共组件|-- static                           // 静态文件，比如一些图片，json数据等|-- .babelrc                         // ES6语法编译配置|-- .editorconfig                    // 定义代码格式|-- .gitignore                       // git上传需要忽略的文件格式|-- .postcsssrc                       // postcss配置文件|-- README.md                        // 项目说明|-- index.html                       // 入口页面|-- package.json                     // 项目基本信息,包依赖信息等</code></pre></li><li>自定义修改项目结构<pre><code>|-- src                              // 源码目录|   |-- common                       // 公共的文件|   |   |-- css|   |   |-- js|   |   |-- images|   |-- components                   // vue公共组件|   |-- router                       // vue的路由管理|   |-- store                        // vuex数据状态管理|   |   |-- modules       // 存储数据模块，每个模块都可以拥有自己的state、getters、actions、mutations|   |   |   |-- seller.js  // 一个模块|   |   |-- actions.js    // 公共的方法（动作）|   |   |-- getters.js    // 获取公共的属性|   |   |-- mutations.js  // 公共的数据变化|   |   |-- index.js      // vuex初始化入口|   |   |-- types.js      // 存储方法名（大写）|   |-- App.vue                      // 页面入口文件|   |-- main.js                      // 程序入口文件，加载各种公共组件|-- static|   |-- css                          //添加静态资源|   |   |-- reset.css</code></pre><img src="https://upload-images.jianshu.io/upload_images/13505073-ba38588610b37509.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="项目结构"></li></ul><h2 id="四、删除替换多余文件及代码"><a href="#四、删除替换多余文件及代码" class="headerlink" title="四、删除替换多余文件及代码"></a>四、删除替换多余文件及代码</h2><h3 id="1、修改文件–src-App-vue"><a href="#1、修改文件–src-App-vue" class="headerlink" title="1、修改文件–src/App.vue"></a>1、修改文件–src/App.vue</h3><pre><code>```&lt;template&gt;    &lt;div id=&quot;app&quot;&gt;        &lt;v-header&gt;&lt;/v-header&gt;        &lt;router-view&gt;&lt;/router-view&gt;    &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import Header from &#39;./components/header/Header.vue&#39;export default {name: &#39;App&#39;,components: {    &#39;v-header&#39;: Header}}&lt;/script&gt;```</code></pre><h3 id="2、修改文件–router-inedx-js"><a href="#2、修改文件–router-inedx-js" class="headerlink" title="2、修改文件–router/inedx.js"></a>2、修改文件–router/inedx.js</h3><ul><li>删除路由配置</li></ul><pre><code>import Vue from &#39;vue&#39;import Router from &#39;vue-router&#39;Vue.use(Router)export default new Router({  routes: [  ]})</code></pre><h3 id="3、添加文件–components-header-Header-vue"><a href="#3、添加文件–components-header-Header-vue" class="headerlink" title="3、添加文件–components/header/Header.vue"></a>3、添加文件–components/header/Header.vue</h3><pre><code>&lt;template&gt;    &lt;div&gt;        欢迎来到我的世界    &lt;/div&gt;&lt;/template&gt;&lt;script&gt;    export default {    }&lt;/script&gt;&lt;style lang=&quot;less&quot; scoped&gt;&lt;/style&gt;</code></pre><h3 id="4、删除–components-HelloWorld-vue"><a href="#4、删除–components-HelloWorld-vue" class="headerlink" title="4、删除–components/HelloWorld.vue"></a>4、删除–components/HelloWorld.vue</h3><h3 id="5、启动项目预览"><a href="#5、启动项目预览" class="headerlink" title="5、启动项目预览"></a>5、启动项目预览</h3><p><img src="https://upload-images.jianshu.io/upload_images/13505073-aa6c0baf7863a0ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="五、完善vuex结构"><a href="#五、完善vuex结构" class="headerlink" title="五、完善vuex结构"></a>五、完善vuex结构</h2><h3 id="1、新建文件vuex–src-store-index-js"><a href="#1、新建文件vuex–src-store-index-js" class="headerlink" title="1、新建文件vuex–src/store/index.js"></a>1、新建文件vuex–src/store/index.js</h3><pre><code>import Vue from &#39;vue&#39;import Vuex from &#39;vuex&#39;import getters from &#39;./getters&#39;import actions from &#39;./actions&#39;import seller from &#39;./modules/seller&#39;Vue.use(Vuex);export default new Vuex.Store({    getters,    actions,    modules: {        seller    }})</code></pre><h3 id="2、引入vuex–src-main-js"><a href="#2、引入vuex–src-main-js" class="headerlink" title="2、引入vuex–src/main.js"></a>2、引入vuex–src/main.js</h3><pre><code>import Vue from &#39;vue&#39;import App from &#39;./App&#39;import router from &#39;./router&#39;import store from &#39;./store/index.js&#39;Vue.config.productionTip = false/* eslint-disable no-new */new Vue({  el: &#39;#app&#39;,  router,  store,  template: &#39;&lt;App/&gt;&#39;,  components: { App }})</code></pre><h3 id="3、新建文件–src-store-getter-js"><a href="#3、新建文件–src-store-getter-js" class="headerlink" title="3、新建文件–src/store/getter.js"></a>3、新建文件–src/store/getter.js</h3><pre><code>const getters={}export default getters;</code></pre><h3 id="4、新建文件–scr-store-types-js"><a href="#4、新建文件–scr-store-types-js" class="headerlink" title="4、新建文件–scr/store/types.js"></a>4、新建文件–scr/store/types.js</h3><pre><code>const GET_SELLER = &quot;GET_SELLER&quot;export default {  GET_SELLER,}</code></pre><h3 id="5、新建文件–src-store-meodules-seller-js"><a href="#5、新建文件–src-store-meodules-seller-js" class="headerlink" title="5、新建文件–src/store/meodules/seller.js"></a>5、新建文件–src/store/meodules/seller.js</h3><pre><code>import types from &quot;../types&quot;import axios from &quot;axios&quot;const state = {  //数据源    seller: {}}const getters= {  //获取数据    seller(state) {        return state.seller    }}const actions = {  //执行发生的动作，提交一个变化    getSeller({commit,state}) {        axios.get(&#39;https://easy-mock.com/mock/5c74af248a68351906bd9aaf/example/seller&#39;).then(resp =&gt; {            // console.log(resp)            if(resp.data.success==200) {                  commit(types.GET_SELLER,resp.data.seller)            }        })    }}const mutations= {  //更新数据源    [types.GET_SELLER](state,data) {        state.seller = data    }}export default {    state,    getters,    actions,    mutations}</code></pre><h3 id="6、修改文件–src-components-header-Header-Vue"><a href="#6、修改文件–src-components-header-Header-Vue" class="headerlink" title="6、修改文件–src/components/header/Header.Vue"></a>6、修改文件–src/components/header/Header.Vue</h3><pre><code>&lt;template&gt;    &lt;div class=&quot;header&quot;&gt;        &lt;img :src=&quot;seller.avatar&quot; alt=&quot;altText&quot;/&gt;        &lt;br&gt;        {{seller.name}}    &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import { mapGetters } from &#39;vuex&#39;;    export default {        created () {            this.$store.dispatch(&#39;getSeller&#39;);  //执行变化，发送actions        },        computed: {            //对象展开运算符，获取seller数据            ...mapGetters([&#39;seller&#39;])        }    }&lt;/script&gt;&lt;style lang=&quot;less&quot; scoped&gt;.header {    img {        width: 64px;        height: 64px;    }}&lt;/style&gt;</code></pre><h3 id="7、运行效果"><a href="#7、运行效果" class="headerlink" title="7、运行效果"></a>7、运行效果</h3><p><img src="https://upload-images.jianshu.io/upload_images/13505073-9e6894da99ea7210.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 脚手架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue-cli </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nvm版本管理和nrm下载源管理</title>
      <link href="/2019/02/10/nvm%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%92%8Cnrm%E4%B8%8B%E8%BD%BD%E6%BA%90%E7%AE%A1%E7%90%86/"/>
      <url>/2019/02/10/nvm%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%92%8Cnrm%E4%B8%8B%E8%BD%BD%E6%BA%90%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p><img src="http://pl7h7g4ko.bkt.clouddn.com/18760162_p0.jpg" alt="壁纸" title="&#39;壁纸&#39;"></p><h3 id="一、NVM-介绍"><a href="#一、NVM-介绍" class="headerlink" title="一、NVM 介绍"></a>一、NVM 介绍</h3><p> 我们可能同时在进行2个 项目，而2个不同的项目所使用的node版本又是不一样的，或者是要用更新的node版本进行试验和学习。这种情况下，对于维护多个版本的node将会是一件非常麻烦的事情，而nvm就是为解决这个问题而产生的，他可以方便的在同一台设备上进行多个node版本之间切换，而这个正是nvm的价值所在，详情可以查看官网<a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">NVM官网</a>。</p><h3 id="二、NVM-安装"><a href="#二、NVM-安装" class="headerlink" title="二、NVM 安装"></a>二、NVM 安装</h3><h4 id="1-nvm-下载"><a href="#1-nvm-下载" class="headerlink" title="1.nvm 下载"></a>1.nvm 下载</h4><p>首先，如果已经安装过了 node，一定要卸载干净，如果不可以就要重装系统了（说多了都是泪，自己也是遇到了 node 版本问题才开始研究 nvm 的）<br>直接进入安装包下载地址：<a href="https://github.com/coreybutler/nvm-windows/releases" target="_blank" rel="noopener">https://github.com/coreybutler/nvm-windows/releases</a>，选择nvm-setup.zip，下载后直接安装。<br><img src="https://upload-images.jianshu.io/upload_images/9989643-782fc61e7d13d273.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/495/format/webp" alt=""><br><img src="https://upload-images.jianshu.io/upload_images/9989643-7a8d4831b2ea94c6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/497/format/webp" alt=""></p><h4 id="2-配置环境变量"><a href="#2-配置环境变量" class="headerlink" title="2.配置环境变量"></a>2.配置环境变量</h4><p><img src="https://upload-images.jianshu.io/upload_images/9989643-5f50d9e75945e9aa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp" alt=""></p><h4 id="3-验证是否安装成功"><a href="#3-验证是否安装成功" class="headerlink" title="3.验证是否安装成功"></a>3.验证是否安装成功</h4><p> 打开命令行，执行nvm -v命令后，出现一下类似的提示说明安装成功。<br> <img src="https://upload-images.jianshu.io/upload_images/9989643-c02e5e0a20388757.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/981/format/webp" alt=""></p><h4 id="4-安装-nodejs"><a href="#4-安装-nodejs" class="headerlink" title="4.安装 nodejs"></a>4.安装 nodejs</h4><p>  使用nvm install <version> [<arch>]命令下载需要的版本。arch参数表示系统位数，默认是64位，如果是32位操作系统，需要执行命令：nvm install 6.9.0 32，出现下图表示安装完成：<br>  <img src="https://upload-images.jianshu.io/upload_images/9989643-1621e43a07b1180c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/879/format/webp" alt=""></arch></version></p><h4 id="5-使用特定版本的-nodejs"><a href="#5-使用特定版本的-nodejs" class="headerlink" title="5.使用特定版本的 nodejs"></a>5.使用特定版本的 nodejs</h4><p> 执行nvm use <version> [<arch>] 命令开始使用特定版本。比如：nvm use 6.9.0或者nvm use 6.9.0 32<br>    <img src="https://upload-images.jianshu.io/upload_images/9989643-acade8e959fc6416.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/801/format/webp" alt=""></arch></version></p><h4 id="6-测试版本的切换"><a href="#6-测试版本的切换" class="headerlink" title="6.测试版本的切换"></a>6.测试版本的切换</h4><p>刚刚下载了node 6.9.0版本并且成功使用，现在我们下载一个6.10.3版本，然后切换并使用。<br><img src="https://upload-images.jianshu.io/upload_images/9989643-18d1e1c29f5ed073.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/747/format/webp" alt=""></p><h4 id="7-nvm-ls-查看已经安装的版本"><a href="#7-nvm-ls-查看已经安装的版本" class="headerlink" title="7.nvm ls 查看已经安装的版本"></a>7.nvm ls 查看已经安装的版本</h4><p><img src="https://upload-images.jianshu.io/upload_images/2793567-e3e91b29a53dfa47.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/305/format/webp" alt=""><br><em>default nvm 默认使用的版本</em>   node和stable 当前安装的node的最新的稳定版本<em>   iojs iojs的最新稳定版本</em>   lts/<em> node lts 系列最新的稳定版本</em>   lts/argon,lts/boron,lts/carbon分别指lts的三个大的版本的最新版本</p><p>此时 NVM 已经安装完成正常使用</p><h4 id="三、nrm-介绍"><a href="#三、nrm-介绍" class="headerlink" title="三、nrm 介绍"></a>三、nrm 介绍</h4><p>　开发的npm registry 管理工具 <a href="https://github.com/Pana/nrm" target="_blank" rel="noopener">nrm</a>, 能够查看和切换当前使用的registry, 最近NPM经常 down 掉, 这个还是很有用的哈哈<br>顾名思义，就是说nrm是一个管理npm的工具</p><h3 id="四、nrm-安装使用"><a href="#四、nrm-安装使用" class="headerlink" title="四、nrm 安装使用"></a>四、nrm 安装使用</h3><h3 id="1-安装-nrm"><a href="#1-安装-nrm" class="headerlink" title="1.安装 nrm"></a>1.安装 nrm</h3><pre><code>$ npm install -g nrm</code></pre><h3 id="2-nrm命令"><a href="#2-nrm命令" class="headerlink" title="2.nrm命令"></a>2.nrm命令</h3><p>_$_ nrm ls　　// 查看所有的支持源（有*号的表示当前所使用的源,以下[name]表示源的名称）</p><p>$ nrm use [name]　　// 将npm下载源切换成指定的源</p><p>$ nrm help　　// 查看nrm帮助</p><p>$ nrm home [name]　　// 跳转到指定源的官网</p><p>如果在你的网络不太理想或者在不能FQ的情况下，又或者收到其他网络限制导致不能使用npm原本的源进行下载时nrm就非常有用了，你只需要<br>  $ nrm ls<br><img src="http://wx1.sinaimg.cn/mw690/006jw4xkly1g02ve0u53kj30fm09ewej.jpg" alt=""><br>$ nrm use [name]<br><img src="http://wx3.sinaimg.cn/mw690/006jw4xkly1g02ve4pyfoj30cp03y0sn.jpg" alt=""><br>即可轻松使用npm进行下载自己所需要的包及工具了。</p>]]></content>
      
      
      <categories>
          
          <category> 版本管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NVM </tag>
            
            <tag> nrm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/01/27/hello-world/"/>
      <url>/2019/01/27/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>记一次gitHub+hexo+hexo-theme-matery搭建博客</title>
      <link href="/2019/01/12/%E8%AE%B0%E4%B8%80%E6%AC%A1gitHub-hexo-hexo-theme-matery%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2019/01/12/%E8%AE%B0%E4%B8%80%E6%AC%A1gitHub-hexo-hexo-theme-matery%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p><img src="http://pl7h7g4ko.bkt.clouddn.com/18699405_p0.jpg" alt="壁纸" title="&#39;壁纸&#39;"></p><h1 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h1><p>一天多的时间使用hexo搭建github-pages博客，采用了 <a href="https://blinkfox.github.io/" target="_blank" rel="noopener">hexo-theme-matery</a>主题，总结一下。<br><a href="https://blinkfox.github.io/" target="_blank">闪烁之狐</a></p><h3 id="1、安装Hexo"><a href="#1、安装Hexo" class="headerlink" title="1、安装Hexo"></a>1、安装Hexo</h3><pre><code>     $ npm install -g hexo</code></pre><h5 id="如果觉得安装的比较慢，可以使用cnpm"><a href="#如果觉得安装的比较慢，可以使用cnpm" class="headerlink" title="如果觉得安装的比较慢，可以使用cnpm"></a>如果觉得安装的比较慢，可以使用cnpm</h5><pre><code>    $ cnpm install -g hexo</code></pre><h3 id="2、部署Hexo"><a href="#2、部署Hexo" class="headerlink" title="2、部署Hexo"></a>2、部署Hexo</h3><pre><code>    $ hexo init</code></pre><h5 id="注：这个命令会初始化博客的目录，所以，执行这个命令时，在你想创建的目录下执行，就自动生成到对应目录下。"><a href="#注：这个命令会初始化博客的目录，所以，执行这个命令时，在你想创建的目录下执行，就自动生成到对应目录下。" class="headerlink" title="注：这个命令会初始化博客的目录，所以，执行这个命令时，在你想创建的目录下执行，就自动生成到对应目录下。"></a>注：这个命令会初始化博客的目录，所以，执行这个命令时，在你想创建的目录下执行，就自动生成到对应目录下。</h5><p>执行命令生，会在当前命令的路径下，生成以下文件：</p><pre><code>    .    ├── .deploy         //执行hexo deploy命令部署到GitHub上的内容目录    ├── public          //执行hexo generate命令，输出的静态网页内容目录    ├── scaffolds      //layout模板文件目录，其中的md文件可以添加编辑    ├── scripts        //扩展脚本目录，这里可以自定义一些javascript脚本    ├── source         //文章源码目录，该目录下的markdown和html文件均会被hexo处理。该页面对应repo的根目录，404文件、favicon.ico文件，CNAME文件等都应该放这里，该目录下可新建页面目录。      |   ├── _drafts    //草稿文章    |   └── _posts     //发布文章    ├── themes          //主题文件目录    ├── _config.yml     //全局配置文件，大多数的设置都在这里    └── package.json     //应用程序数据，指明hexo的版本等信息</code></pre><h3 id="3、Hexo命令"><a href="#3、Hexo命令" class="headerlink" title="3、Hexo命令"></a>3、Hexo命令</h3><p>Hexo下，通过 _config.yml 设置博客，可以想象成我们用的软件里的设置一样，只是它通过一个文件列出这些参数，然后让我们填写和修改。</p><ul><li>全局设置<br>在你博客目录下有一个文件名_config.yml，打开可以配置信息。</li><li>局部设置<br>在你博客目录下 \themes\你使用的主题\_config.yml</li><li><p>写博客相关命令</p><pre><code>  Hexo常用命令：  hexo new &quot;postName&quot;       #新建文章  hexo new page &quot;pageName&quot;  #新建页面  hexo generate             #生成静态页面至public目录  hexo server               #开启预览访问端口（默认端口4000，&#39;ctrl + c&#39;关闭server）  hexo deploy               #将.deploy目录部署到GitHub</code></pre><p>当然，如果每次输入那么长命令，那么一定想到用简写：</p><pre><code>  hexo n == hexo new  hexo g == hexo generate  hexo s == hexo server  hexo d == hexo deploy</code></pre><p>其它的，还可以<em>复合命令</em>：</p><pre><code>  # 生成完毕后自动部署网站,两个命令的作用是相同的  $ hexo g -d  $ hexo d -g</code></pre><p>有时候生成的网页出错了，而生成的rss其实没有清除，那么用下面的命令，在重新生成吧</p><pre><code>  $ hexo clean</code></pre><p>当本地调试出现诡异现象时候，请先使用 hexo clean 清理已经生成的静态文件后重试。</p></li></ul><blockquote><p>注：Hexo原理就是hexo在执行hexo generate时会在本地先把博客生成的一套静态站点放到public文件夹中，在执行hexo deploy时将其复制到.deploy文件夹中。Github的版本库通常建议同时附上README.md说明文件,但是hexo默认情况下会把所有md文件解析成html文件，所以即使你在线生成了README.md，它也会在你下一次部署时被删去。怎么解决呢？<br>在执行hexo deploy前把在本地写好的README.md文件复制到.deploy文件夹中，再去执行hexo deploy。</p></blockquote><h3 id="4、博客管理"><a href="#4、博客管理" class="headerlink" title="4、博客管理"></a>4、博客管理</h3><p>上面命令中，其实生成文章，可以直接把写好的文章插入到目录/_posts 下面，后缀为.MD就行，在文章头部固定格式：</p><pre><code>    title: Mac提高使用效率的一些方法   #文章的标题，这个才是显示的文章标题，其实文件名不影响    date: 2015-09-01 20:33:26      #用命令会自动生成，也可以自己写，所以文章时间可以改    categories: technology         #文章的分类，这个可以自己定义    tags: [Mac,效率,快捷方式]        #tag，为文章添加标签，方便搜索    ---</code></pre><p>当然，里面有很多东西的，如果你专注于写作，那么可以不用太关心了，比如tags标签可以写成下面那样，因为hexo文章的头部文件是用AML来写的。</p><pre><code>tags:    - tag1    - tag2</code></pre><p>如果在博客文章列表中，不想全文显示，可以增加 , 后面的内容就不会显示在列表。<br><code>&lt;!--more--&gt;</code><br>我使用的[hexo-theme-matery]主题默认有缩略，可以不用加这个代码</p><h3 id="5、插件"><a href="#5、插件" class="headerlink" title="5、插件"></a>5、插件</h3><ul><li><p>安装插件</p><pre><code>  $ npm install &lt;plugin-name&gt; --save</code></pre></li><li><p>萌萌哒插件-<a href="https://www.simon96.online/2018/10/12/hexo-tutorial/" target="_blank" rel="noopener">参考链接</a><br>1.安装插件</p><pre><code>npm install --save hexo-helper-live2d</code></pre><p>2.复制你喜欢的模型的名字，例如nipsilon<br>3.将以下代码添加到主题配置文件<code>_config.yml</code>，修改&lt;你喜欢的模型名字&gt;：</p><pre><code>live2d:enable: truescriptFrom: localpluginRootPath: live2dw/pluginJsPath: lib/pluginModelPath: assets/tagMode: falselog: falsemodel:  use: live2d-widget-model-&lt;你喜欢的模型名字&gt;display:  position: right  width: 150  height: 300mobile:  show: true</code></pre></li></ul><blockquote><p>参考链接：<br><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo中文官网</a><br><a href="https://space.bilibili.com/362224537?spm_id_from=333.788.b_765f7570696e666f.1" target="_blank" rel="noopener">bilibili周三Josan</a><br><a href="https://github.com/blinkfox/hexo-theme-matery" target="_blank" rel="noopener">闪烁之狐主题</a><br><a href="https://www.simon96.online/2018/10/12/hexo-tutorial/" target="_blank" rel="noopener">博客-遇见西门</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typora-vue-theme主题介绍</title>
      <link href="/2018/09/07/%E6%96%87%E7%AB%A0Front-matter%E7%A4%BA%E4%BE%8B/"/>
      <url>/2018/09/07/%E6%96%87%E7%AB%A0Front-matter%E7%A4%BA%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
